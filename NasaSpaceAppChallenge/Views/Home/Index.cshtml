@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://learn.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>

<div>
    <body>
    <div id="scene-container"></div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
        // Set up the scene, camera, and renderer
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.getElementById('scene-container').appendChild(renderer.domElement);

        // Create Earth
        const earthGeometry = new THREE.SphereGeometry(1, 32, 32);
        const earthMaterial = new THREE.MeshBasicMaterial({ color: 0x2233ff });
        const earth = new THREE.Mesh(earthGeometry, earthMaterial);
        scene.add(earth);

        // Function to create text sprite
        function createTextSprite(text) {
            const canvas = document.createElement('canvas');
            const context = canvas.getContext('2d');
            context.font = 'Bold 40px Arial';
            context.fillStyle = 'rgb(255,255,255)';
            context.fillText(text, 0, 40);

            const texture = new THREE.CanvasTexture(canvas);
            texture.needsUpdate = true;

            const spriteMaterial = new THREE.SpriteMaterial({ map: texture });
            const sprite = new THREE.Sprite(spriteMaterial);
            sprite.scale.set(3, 1, 1);

            return sprite;
        }

        // Create NEOs
        const numNeos = 55;
        const neoSize = 0.1;
        const trailLength = 200; // Number of points in the trail
        const neos = [];

        function createEllipticalOrbit(a, b, inclination) {
            const curve = new THREE.EllipseCurve(0, 0, a, b, 0, 2 * Math.PI, false, 0);
            const points = curve.getPoints(50);
            const geometry = new THREE.BufferGeometry().setFromPoints(points);
            const material = new THREE.LineBasicMaterial({ color: 0xffffff, opacity: 0.5, transparent: true });
            const ellipse = new THREE.Line(geometry, material);
            ellipse.rotation.x = Math.PI / 2;
            ellipse.rotation.y = inclination;
            return ellipse;
        }

        for (let i = 0; i < numNeos; i++) {
            const a = 2 + Math.random() * 6; // semi-major axis
            const b = a * (0.5 + Math.random() * 0.5); // semi-minor axis
            const inclination = Math.random() * Math.PI / 4; // Random inclination up to 45 degrees

            // Create orbit
            const orbit = createEllipticalOrbit(a, b, inclination);
            //scene.add(orbit);

            // Create NEO
            const neoGeometry = new THREE.SphereGeometry(neoSize, 16, 16);
            const neoMaterial = new THREE.MeshBasicMaterial({ color: Math.random() * 0xffffff });
            const neo = new THREE.Mesh(neoGeometry, neoMaterial);
            scene.add(neo);

            // Create label for NEO
            const label = createTextSprite(`NEO ${i + 1}`);
            scene.add(label);

            // Create trail for the NEO
            const trailGeometry = new THREE.BufferGeometry();
            const trailPositions = new Float32Array(trailLength * 3);
            trailGeometry.setAttribute('position', new THREE.BufferAttribute(trailPositions, 3));
            const trailMaterial = new THREE.LineBasicMaterial({ color: 0xffffff, opacity: 0.5, transparent: true });
            const trail = new THREE.Line(trailGeometry, trailMaterial);
            scene.add(trail);

            neos.push({
                object: neo,
                orbit: orbit,
                label: label,
                speed: 0.005 + Math.random() * 0.01,
                originalSpeed: 0.005 + Math.random() * 0.01, // Store the original speed
                angle: Math.random() * Math.PI * 2,
                a: a,
                b: b,
                inclination: inclination,
                trail: trail,
                trailPositions: trailPositions
            });
        }

        // Position and tilt camera
        camera.position.set(0, 12, 15);
        camera.lookAt(scene.position);

        // Camera rotation and zoom
        let cameraAngle = 0;
        let cameraRadius = Math.sqrt(camera.position.x ** 2 + camera.position.z ** 2);
        const minZoom = 5;
        const maxZoom = 20;

        // Animation control
        let isAnimationPaused = false;
        let animationSpeed = 1;
        const minAnimationSpeed = 0.01;

        // Zoom control
        let isZoomEnabled = false;

        // Animation loop
        function animate() {
            requestAnimationFrame(animate);

            if (!isAnimationPaused) {
                // Rotate Earth
                earth.rotation.y += 0.005 * animationSpeed;

                // Move NEOs along their orbits and update trails and labels
                neos.forEach((neo) => {
                    neo.angle += neo.speed * animationSpeed;
                    const x = Math.cos(neo.angle) * neo.a;
                    const z = Math.sin(neo.angle) * neo.b;

                    // Apply inclination
                    const y = Math.sin(neo.angle) * Math.sin(neo.inclination) * neo.b;

                    // Update NEO position
                    neo.object.position.set(x, y, z);

                    // Update label position
                    neo.label.position.set(x, y + 0.3, z);

                    // Update trail
                    neo.trailPositions.copyWithin(3, 0);
                    neo.trailPositions[0] = x;
                    neo.trailPositions[1] = y;
                    neo.trailPositions[2] = z;
                    neo.trail.geometry.attributes.position.needsUpdate = true;
                });

                // Rotate camera
                cameraAngle += 0.005 * animationSpeed;
                camera.position.x = Math.sin(cameraAngle) * cameraRadius;
                camera.position.z = Math.cos(cameraAngle) * cameraRadius;
                camera.lookAt(scene.position);
            }

            renderer.render(scene, camera);
        }

        animate();

        // Handle window resizing
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });

        // Handle space key press
        window.addEventListener('keydown', (event) => {
            if (event.code === 'Space') {
                if (!isAnimationPaused) {
                    // Start slowing down
                    isAnimationPaused = true;
                    const slowDownInterval = setInterval(() => {
                        animationSpeed *= 0.9; // Reduce speed by 10% each interval
                        if (animationSpeed <= minAnimationSpeed) {
                            animationSpeed = minAnimationSpeed;
                            clearInterval(slowDownInterval);
                        }
                    }, 50);
                } else {
                    // Resume animation
                    isAnimationPaused = false;
                    animationSpeed = 1;
                }
            }
        });

        // Handle click on scene container to toggle zoom
        document.getElementById('scene-container').addEventListener('click', () => {
            isZoomEnabled = !isZoomEnabled;
            document.body.style.cursor = isZoomEnabled ? 'zoom-in' : 'default';
        });

        // Handle scroll for zoom only when enabled
        window.addEventListener('wheel', (event) => {
            if (isZoomEnabled) {
                event.preventDefault();
                const zoomSpeed = 0.1;
                if (event.deltaY < 0) {
                    // Scroll up - zoom in
                    cameraRadius = Math.max(cameraRadius - zoomSpeed, minZoom);
                } else {
                    // Scroll down - zoom out
                    cameraRadius = Math.min(cameraRadius + zoomSpeed, maxZoom);
                }
                camera.position.y = cameraRadius * Math.sin(Math.PI / 4); // Maintain the tilt
            }
        }, { passive: false });
    </script>
    </body>
</div>

<script>
    async function loadNasaFeed() {
        try {
            const response = await fetch('/Home/GetFeedFromNasa');
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const data = await response.json();
            console.log(data);
            // Aquí puedes agregar el código para manejar los datos recibidos
        } catch (error) {
            console.error('Error fetching data:', error);
        }
    }

    // Llamar a la función para cargar los datos
    
    loadNasaFeed();
</script> 